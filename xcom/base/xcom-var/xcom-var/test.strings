// 友元重载 ： 双目算术运算符    + (加)，-(减)，*(乘)，/(除)，% (取模)
// 只针对数据类型, 非数据类型返回 xcom_data()
friend xcom_data operator+(const xcom_data& a, const xcom_data& b) throw(std::logic_error);
friend xcom_data operator-(const xcom_data& a, const xcom_data& b) throw(std::logic_error);
friend xcom_data operator*(const xcom_data& a, const xcom_data& b) throw(std::logic_error);
friend xcom_data operator/(const xcom_data& a, const xcom_data& b) throw(std::logic_error);
friend xcom_data operator%(const xcom_data& a, const xcom_data& b) throw(std::logic_error);

// 关系运算符   != (不等于)，< (小于)，> (大于>，<=(小于等于)，>=(大于等于)
friend bool operator !=(const xcom_data& a, const xcom_data& b) throw(std::logic_error);
friend bool operator ==(const xcom_data& a, const xcom_data& b) throw(std::logic_error);
friend bool operator < (const xcom_data& a, const xcom_data& b) throw(std::logic_error);
friend bool operator > (const xcom_data& a, const xcom_data& b) throw(std::logic_error);
friend bool operator <=(const xcom_data& a, const xcom_data& b) throw(std::logic_error);
friend bool operator >=(const xcom_data& a, const xcom_data& b) throw(std::logic_error);

// 逻辑运算符    ||(逻辑或)，&&(逻辑与)，!(逻辑非)
friend xcom_data operator||(const xcom_data& a, const xcom_data& b) throw(std::logic_error);
friend xcom_data operator&&(const xcom_data& a, const xcom_data& b) throw(std::logic_error);
friend xcom_data operator!(const xcom_data& a) throw(std::logic_error);
//  单目运算符    + (正)，-(负)
xcom_data operator +() const throw(std::logic_error);
xcom_data operator -() const throw(std::logic_error);
// 自增自减运算符    ++(自增)，--(自减)
xcom_data& operator++ () throw(std::logic_error);     // prefix ++
xcom_data  operator++ (int) throw(std::logic_error);// postfix ++

xcom_data& operator-- () throw(std::logic_error);     // prefix --
xcom_data  operator-- (int) throw(std::logic_error);  // postfix --


// 位运算符:只对整型    | (按位或)，& (按位与)，~(按位取反)，^(按位异或),，<< (左移)，>>(右移)
friend xcom_data operator | (const xcom_data& a, const xcom_data& b) throw(std::logic_error);
friend xcom_data operator & (const xcom_data& a, const xcom_data& b) throw(std::logic_error);
friend xcom_data operator ^ (const xcom_data& a, const xcom_data& b) throw(std::logic_error);
friend xcom_data operator ~ (const xcom_data& a) throw(std::logic_error);
friend xcom_data operator << (const xcom_data& a, int i) throw(std::logic_error);
friend std::ostream & operator <<(std::ostream &os, const xcom_data &a );
friend xcom_data operator >> (const xcom_data& a, int i) throw(std::logic_error);
// 赋值运算符 +=, -=, *=, /= , % = , &=, |=, ^=, <<=, >>=
inline xcom_data& operator +=(const xcom_data& a) throw(std::logic_error)
{
    *this = *this + a;
    return *this;
}
inline xcom_data& operator -=(const xcom_data& a) throw(std::logic_error)
{
    *this = *this - a;
    return *this;
}
inline xcom_data& operator *=(const xcom_data& a) throw(std::logic_error)
{
    *this = *this * a;
    return *this;
}
inline xcom_data& operator /=(const xcom_data& a) throw(std::logic_error)
{
    *this = *this / a;
    return *this;
}
inline xcom_data& operator %=(const xcom_data& a) throw(std::logic_error)
{
    *this = *this % a;
    return *this;
}
inline xcom_data& operator &=(const xcom_data& a) throw(std::logic_error)
{
    *this = *this & a;
    return *this;
}
inline xcom_data& operator |=(const xcom_data& a) throw(std::logic_error)
{
    *this = *this | a;
    return *this;
}
inline xcom_data& operator ^=(const xcom_data& a) throw(std::logic_error)
{
    *this = *this ^ a;
    return *this;
}
inline xcom_data& operator <<=(int i) throw(std::logic_error)
{
    *this = *this << i;
    return *this;
}
inline xcom_data& operator >>=(int i) throw(std::logic_error)
{
    *this = *this >> i;
    return *this;
}
